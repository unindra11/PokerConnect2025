rules_version = '2';

service cloud.firestore {
  match /databases/poker/documents {
    // Helper function to check if two users are friends
    function areFriends(userId1, userId2) {
      return exists(/databases/poker/documents/users/$(userId1)/friends/$(userId2)) &&
             exists(/databases/poker/documents/users/$(userId2)/friends/$(userId1));
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId; // Allow user to delete their own document

      match /friends/{friendId} {
        allow read: if request.auth != null &&
                     (request.auth.uid == userId ||
                      exists(/databases/poker/documents/users/$(userId)/friends/$(request.auth.uid)));
        allow create: if request.auth != null &&
                       (request.auth.uid == userId || request.auth.uid == friendId) &&
                       request.resource.data.keys().hasOnly(['friendUserId', 'username', 'name', 'avatar', 'since']) &&
                       request.resource.data.friendUserId is string &&
                       request.resource.data.username is string &&
                       request.resource.data.name is string &&
                       request.resource.data.avatar is string &&
                       request.resource.data.since is timestamp;
        allow delete: if request.auth != null && (request.auth.uid == userId || request.auth.uid == friendId);
      }

      match /notifications/{notificationId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null &&
                       request.resource.data.senderId == request.auth.uid &&
                       (request.resource.data.type in ['like_post', 'comment_post', 'friend_request', 'friend_request_firestore', 'share_post', 'friend_request_accepted', 'friend_request_declined']) &&
                       request.resource.data.keys().hasAll(['type', 'senderId', 'createdAt', 'read']) &&
                       request.resource.data.keys().hasOnly(['type', 'senderId', 'senderUsername', 'senderAvatar', 'postId', 'commentText', 'caption', 'receiverId', 'createdAt', 'read']) &&
                       request.resource.data.createdAt is timestamp &&
                       request.resource.data.read is bool &&
                       request.resource.data.senderUsername is string &&
                       request.resource.data.senderAvatar is string &&
                       (!('receiverId' in request.resource.data) || request.resource.data.receiverId is string) &&
                       (request.resource.data.type != 'comment_post' || request.resource.data.keys().hasAll(['commentText', 'postId'])) &&
                       (request.resource.data.type != 'like_post' || request.resource.data.keys().hasAll(['postId'])) &&
                       (request.resource.data.type != 'share_post' || request.resource.data.keys().hasAll(['postId', 'caption'])) &&
                       (request.resource.data.type != 'friend_request' && request.resource.data.type != 'friend_request_firestore' || request.resource.data.keys().hasAll(['senderUsername', 'senderAvatar'])) &&
                       (request.resource.data.type != 'friend_request_accepted' || request.resource.data.keys().hasAll(['senderUsername', 'senderAvatar', 'receiverId'])) &&
                       (request.resource.data.type != 'friend_request_declined' || request.resource.data.keys().hasAll(['senderUsername', 'senderAvatar', 'receiverId']));
        allow update: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']) &&
                       request.resource.data.read is bool;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /friendRequests/{requestId} {
      allow read: if request.auth != null &&
                   (resource == null ||
                    (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId));
      allow create: if request.auth != null &&
                     request.auth.uid == request.resource.data.senderId &&
                     request.resource.data.keys().hasAll(['senderId', 'receiverId', 'status', 'createdAt', 'updatedAt']) &&
                     request.resource.data.senderId is string &&
                     request.resource.data.receiverId is string &&
                     request.resource.data.status == 'pending' &&
                     request.resource.data.createdAt is timestamp &&
                     request.resource.data.updatedAt is timestamp;
      allow update: if request.auth != null && request.auth.uid == resource.data.receiverId &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']) &&
                     (request.resource.data.status == 'accepted' || request.resource.data.status == 'declined');
      allow delete: if request.auth != null &&
                     (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId); // Allow deletion by sender or receiver regardless of status
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null &&
                     request.auth.uid == request.resource.data.userId &&
                     request.resource.data.keys().hasAll(['userId', 'user', 'content', 'createdAt']) &&
                     request.resource.data.keys().hasOnly(['userId', 'user', 'content', 'image', 'imageAiHint', 'likes', 'comments', 'shares', 'createdAt', 'updatedAt', 'originalPostId']) &&
                     request.resource.data.createdAt is timestamp &&
                     request.resource.data.user.name is string &&
                     request.resource.data.user.avatar is string &&
                     request.resource.data.user.handle is string &&
                     request.resource.data.content is string &&
                     request.resource.data.likes == 0 &&
                     request.resource.data.comments == 0 &&
                     request.resource.data.shares == 0 &&
                     (!('originalPostId' in request.resource.data) || request.resource.data.originalPostId is string);
      allow update: if request.auth != null &&
                     (
                       (
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments', 'shares']) &&
                         (!('likes' in request.resource.data) || (request.resource.data.likes is int && request.resource.data.likes >= 0)) &&
                         (!('comments' in request.resource.data) || (request.resource.data.comments is int && request.resource.data.comments >= 0)) &&
                         (!('shares' in request.resource.data) || (request.resource.data.shares is int && request.resource.data.shares >= 0))
                       ) ||
                       request.auth.uid == resource.data.userId
                     );
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;

      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.userId &&
                       request.resource.data.keys().hasAll(['userId', 'username', 'avatar', 'text', 'createdAt']) &&
                       request.resource.data.userId is string &&
                       request.resource.data.username is string &&
                       request.resource.data.avatar is string &&
                       request.resource.data.text is string &&
                       request.resource.data.createdAt is timestamp;
        allow update: if request.auth != null && request.auth.uid == resource.data.userId;
        allow delete: if request.auth != null &&
                       (request.auth.uid == resource.data.userId || // Comment creator
                        request.auth.uid == get(/databases/poker/documents/posts/$(postId)).data.userId); // Post owner
      }
    }

    match /likes/{likeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                     request.auth.uid == request.resource.data.userId &&
                     request.resource.data.keys().hasAll(['userId', 'postId', 'createdAt']) &&
                     request.resource.data.userId is string &&
                     request.resource.data.postId is string &&
                     request.resource.data.createdAt is timestamp;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /chats/{chatId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                     request.auth.uid in request.resource.data.participants &&
                     request.resource.data.participants.size() == 2 &&
                     areFriends(request.resource.data.participants[0], request.resource.data.participants[1]) &&
                     request.resource.data.keys().hasAll(['participants', 'lastMessage', 'unreadCounts']) &&
                     request.resource.data.participants is list &&
                     request.resource.data.lastMessage is map &&
                     request.resource.data.lastMessage.keys().hasAll(['text', 'senderId', 'timestamp']) &&
                     request.resource.data.lastMessage.text is string &&
                     request.resource.data.lastMessage.senderId is string &&
                     (request.resource.data.lastMessage.timestamp is timestamp || request.resource.data.lastMessage.timestamp == null) &&
                     request.resource.data.unreadCounts is map &&
                     request.resource.data.unreadCounts.keys().hasAll([request.resource.data.participants[0], request.resource.data.participants[1]]) &&
                     request.resource.data.unreadCounts[request.resource.data.participants[0]] is int &&
                     request.resource.data.unreadCounts[request.resource.data.participants[1]] is int;
      allow update: if request.auth != null &&
                     request.auth.uid in resource.data.participants &&
                     areFriends(resource.data.participants[0], resource.data.participants[1]) &&
                     request.resource.data.participants == resource.data.participants &&
                     request.resource.data.keys().hasAll(['participants', 'lastMessage', 'unreadCounts']) &&
                     request.resource.data.lastMessage is map &&
                     request.resource.data.lastMessage.keys().hasAll(['text', 'senderId', 'timestamp']) &&
                     request.resource.data.lastMessage.text is string &&
                     request.resource.data.lastMessage.senderId is string &&
                     (request.resource.data.lastMessage.timestamp is timestamp || request.resource.data.lastMessage.timestamp == null) &&
                     request.resource.data.unreadCounts is map &&
                     request.resource.data.unreadCounts.keys().hasAll([resource.data.participants[0], resource.data.participants[1]]) &&
                     request.resource.data.unreadCounts[resource.data.participants[0]] is int &&
                     request.resource.data.unreadCounts[resource.data.participants[1]] is int;
      allow delete: if request.auth != null && request.auth.uid in resource.data.participants;

      match /messages/{messageId} {
        allow read: if request.auth != null &&
                     request.auth.uid in get(/databases/poker/documents/chats/$(chatId)).data.participants &&
                     areFriends(get(/databases/poker/documents/chats/$(chatId)).data.participants[0], get(/databases/poker/documents/chats/$(chatId)).data.participants[1]);
        allow create: if request.auth != null &&
                       request.auth.uid in get(/databases/poker/documents/chats/$(chatId)).data.participants &&
                       areFriends(get(/databases/poker/documents/chats/$(chatId)).data.participants[0], get(/databases/poker/documents/chats/$(chatId)).data.participants[1]) &&
                       request.auth.uid == request.resource.data.senderId &&
                       request.resource.data.keys().hasAll(['senderId', 'text', 'timestamp', 'read']) &&
                       request.resource.data.senderId is string &&
                       request.resource.data.text is string &&
                       request.resource.data.timestamp is timestamp &&
                       request.resource.data.read is bool;
        allow update: if request.auth != null &&
                       request.auth.uid in get(/databases/poker/documents/chats/$(chatId)).data.participants &&
                       areFriends(get(/databases/poker/documents/chats/$(chatId)).data.participants[0], get(/databases/poker/documents/chats/$(chatId)).data.participants[1]) &&
                       (
                         // Allow updates to 'read' field by any participant
                         (
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']) &&
                           request.resource.data.read is bool
                         ) ||
                         // Allow sender to update 'deleted' and 'text' fields for deletion
                         (
                           request.auth.uid == resource.data.senderId &&
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deleted', 'text']) &&
                           request.resource.data.deleted == true &&
                           request.resource.data.text == ""
                         )
                       );
        allow delete: if request.auth != null &&
                       request.auth.uid in get(/databases/poker/documents/chats/$(chatId)).data.participants;
      }
    }
  }
}